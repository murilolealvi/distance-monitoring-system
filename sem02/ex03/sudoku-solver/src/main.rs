

mod solve;
use solve::SolveSudoku;


fn main() {
    let _board_invalid : Vec<Vec<char>> = vec![
    vec!['8','3','.','.','7','.','.','.','.'], //"" create string literals, while single-quotes '' create char literals
    vec!['6','.','.','1','9','5','.','.','.'],
    vec!['.','9','8','.','.',',','.','6','.'],
    vec!['8','.',',','.','6',',','.','.','3'],
    vec!['4','.',',','8','.','3','.','.','1'],
    vec!['7','.',',','.','2','.','.','.','6'],
    vec!['.','6',',','.','.','.','2','8','.'],
    vec!['.','.',',','4','1','9','.','.','5'],
    vec!['.','.',',','.','8','.','.','7','9']];
    let _board_valid : Vec<Vec<char>> = vec![
    vec!['5','3','.','.','7','.','.','.','.'], //"" create string literals, while single-quotes '' create char literals
    vec!['6','.','.','1','9','5','.','.','.'],
    vec!['.','9','8','.','.','.','.','6','.'],
    vec!['8','.','.','.','6','.','.','.','3'],
    vec!['4','.','.','8','.','3','.','.','1'],
    vec!['7','.','.','.','2','.','.','.','6'],
    vec!['.','6','.','.','.','.','2','8','.'],
    vec!['.','.','.','4','1','9','.','.','5'],
    vec!['.','.','.','.','8','.','.','7','9']];
    let mut sudoku = SolveSudoku::new(_board_valid, 9);
    println!("{}", sudoku.board_is_valid());
}
